/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        // slow = x + y 
        // fast = x + n(y + z) + y
        //2x + 2y = x + ny + nz + y
        //x = ny + nz - y 
        //x = (n-1)(y+z) + z
        //n >= 1, when n = 1
        //x = z 
        //从起点，和第一次相遇的点同时出发，再次相遇的点就是环的入口
        if(head == null) return null; 
        ListNode slow = head.next; 
        if(head.next == null || head.next.next == null) return null; 
        ListNode fast = head.next.next;
        while (slow != fast) {
            //System.out.println(slow.val + " " + fast.val);
            if(fast.next == null || fast.next.next == null) return null;
            fast = fast.next.next; 
            slow = slow.next;
        }
        //slow == fast
        fast = head; 
        while (slow != fast) {
            fast = fast.next;
            slow = slow.next;
        }
        return slow;
    }
}
