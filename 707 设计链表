class MyLinkedList {
    int size;
    ListNode dummyhead;
    public MyLinkedList() {
        this.size = 0;
        dummyhead = new ListNode(-1);
    }
    
    public int get(int index) {
        if(index >= size) return -1;
        ListNode curr = dummyhead;
        for (int i = 0; i < index; i++) {
            curr = curr.next;
        }
        return curr.next.val;
    }
    
    public void addAtHead(int val) {
        ListNode head = new ListNode(val);
        head.next = dummyhead.next;
        dummyhead.next = head;
        size ++;
    }
    
    public void addAtTail(int val) {
        ListNode curr = dummyhead;
        while (curr.next != null) {
            curr = curr.next;
        } // curr.next == null
        curr.next = new ListNode(val);
        size ++;
    }
    
    public void addAtIndex(int index, int val) {
        if(index > size) return; 
        if(index == size) {
            addAtTail(val);
            return;
        }
        ListNode curr = dummyhead; 
        for (int i = 0; i < index; i++ ) {
            curr = curr.next;
        }
        ListNode newNode = new ListNode(val);
        newNode.next = curr.next;
        curr.next = newNode;
        size ++;
    }
    
    public void deleteAtIndex(int index) {
        if(index >= size)    return;
        ListNode curr = dummyhead;
        for (int i = 0; i < index; i ++) {
            curr = curr.next;
        }
        curr.next = curr.next.next;
        size --;
    }
}
class ListNode {
    int val; 
    ListNode next;
    public ListNode(int val) {
        this.val = val;
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
